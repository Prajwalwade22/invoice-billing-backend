using InvoiceBillingSystem.DTO;
using InvoiceBillingSystem.Repositories;
using OfficeOpenXml;
using QuestPDF.Fluent;
using QuestPDF.Helpers;

namespace InvoiceBillingSystem.Services
{
    public class ReportService : IReportService
    {
        private readonly IReportRepository _reportRepository;

        public ReportService(IReportRepository reportRepository)
        {
            _reportRepository = reportRepository;
        }

        public async Task<ReportSummaryDto> GetReportSummaryAsync(DateTime? startDate, DateTime? endDate)
        {
            return new ReportSummaryDto
            {
                TotalRevenue = await _reportRepository.GetTotalRevenueAsync(startDate, endDate),
                PendingInvoices = await _reportRepository.GetPendingInvoiceCountAsync(startDate, endDate),
                TotalTaxCollected = await _reportRepository.GetTotalTaxCollectedAsync(startDate, endDate),
                TopCustomers = await _reportRepository.GetTopCustomersAsync(startDate, endDate)
            };
        }

        public async Task<byte[]> GenerateReportPdfAsync(DateTime? startDate, DateTime? endDate)
        {
            var report = await GetReportSummaryAsync(startDate, endDate);

            using (var stream = new MemoryStream())
            {
                Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Margin(20);
                        page.Header().AlignCenter().Text("Financial Report").FontSize(24).Bold().FontColor(Colors.Blue.Darken2);

                        page.Content().Column(col =>
                        {
                            col.Item().Background(Colors.Grey.Lighten3).Padding(5).Text("Report Summary").FontSize(18).Bold().FontColor(Colors.Blue.Darken2);

                            col.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(200);
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Metric").Bold();
                                    header.Cell().Background(Colors.Grey.Lighten2).Padding(5).Text("Value").Bold();
                                });

                                AddTableRow(table, "Total Revenue", $"${report.TotalRevenue}");
                                AddTableRow(table, "Pending Invoices", report.PendingInvoices.ToString());
                                AddTableRow(table, "Total Tax Collected", $"${report.TotalTaxCollected}");

                                AddTableRow(table, "Top Customers", "Amount Spent");
                                foreach (var customer in report.TopCustomers)
                                {
                                    AddTableRow(table, $"User: {customer.UserId}", $"${customer.TotalSpent}");
                                }
                            });

                            col.Item().PaddingTop(10);
                            col.Item().AlignCenter().Text("Generated by InvoiceBillingSystem").Italic().FontColor(Colors.Green.Darken2);
                        });
                    });
                }).GeneratePdf(stream);

                return stream.ToArray();
            }
        }

        private void AddTableRow(TableDescriptor table, string label, string value)
        {
            table.Cell().BorderBottom(1).Padding(5).Text(label).FontSize(12).Bold();
            table.Cell().BorderBottom(1).Padding(5).Text(value).FontSize(12);
        }



        public async Task<byte[]> GenerateReportExcelAsync(DateTime? startDate, DateTime? endDate)
        {
            var report = await GetReportSummaryAsync(startDate, endDate);
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Report");

                // Title Styling
                var titleCell = worksheet.Cells["A1:B1"];
                titleCell.Merge = true;
                titleCell.Value = "Financial Report";
                titleCell.Style.Font.Size = 16;
                titleCell.Style.Font.Bold = true;
                titleCell.Style.Font.Color.SetColor(System.Drawing.Color.DarkBlue);
                titleCell.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                worksheet.Cells["A3"].Value = "Metric";
                worksheet.Cells["B3"].Value = "Value";
                worksheet.Cells["A3:B3"].Style.Font.Bold = true;
                worksheet.Cells["A3:B3"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A3:B3"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);

                worksheet.Cells["A4"].Value = "Total Revenue";
                worksheet.Cells["B4"].Value = $"${report.TotalRevenue}";

                worksheet.Cells["A5"].Value = "Pending Invoices";
                worksheet.Cells["B5"].Value = report.PendingInvoices;

                worksheet.Cells["A6"].Value = "Total Tax Collected";
                worksheet.Cells["B6"].Value = $"${report.TotalTaxCollected}";

                int row = 8;
                worksheet.Cells[$"A{row}"].Value = "Top Customers";
                worksheet.Cells[$"A{row}"].Style.Font.Bold = true;
                worksheet.Cells[$"A{row}"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells[$"A{row}"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);

                row++;
                worksheet.Cells[$"A{row}"].Value = "User ID";
                worksheet.Cells[$"B{row}"].Value = "Amount Spent";
                worksheet.Cells[$"A{row}:B{row}"].Style.Font.Bold = true;
                worksheet.Cells[$"A{row}:B{row}"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells[$"A{row}:B{row}"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);

                row++;

                foreach (var customer in report.TopCustomers)
                {
                    worksheet.Cells[$"A{row}"].Value = customer.UserId.ToString();
                    worksheet.Cells[$"B{row}"].Value = $"${customer.TotalSpent}";
                    row++;
                }

                worksheet.Cells.AutoFitColumns();
                return package.GetAsByteArray();
            }
        }

    }


}
